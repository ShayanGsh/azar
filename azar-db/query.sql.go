// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addPermission = `-- name: AddPermission :exec
INSERT INTO permissions (name, created_at, updated_at) VALUES ($1, $2, $3)
`

type AddPermissionParams struct {
	Name      string           `json:"name"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) AddPermission(ctx context.Context, arg AddPermissionParams) error {
	_, err := q.db.Exec(ctx, addPermission, arg.Name, arg.CreatedAt, arg.UpdatedAt)
	return err
}

const addPermissionGroup = `-- name: AddPermissionGroup :exec
INSERT INTO permission_groups (group_name, created_at, updated_at) VALUES ($1, $2, $3)
`

type AddPermissionGroupParams struct {
	GroupName string           `json:"group_name"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) AddPermissionGroup(ctx context.Context, arg AddPermissionGroupParams) error {
	_, err := q.db.Exec(ctx, addPermissionGroup, arg.GroupName, arg.CreatedAt, arg.UpdatedAt)
	return err
}

const addPermissionGroupMap = `-- name: AddPermissionGroupMap :exec
INSERT INTO permission_group_map (permission_id, permission_group_id) VALUES ($1, $2)
`

type AddPermissionGroupMapParams struct {
	PermissionID      int32 `json:"permission_id"`
	PermissionGroupID int32 `json:"permission_group_id"`
}

func (q *Queries) AddPermissionGroupMap(ctx context.Context, arg AddPermissionGroupMapParams) error {
	_, err := q.db.Exec(ctx, addPermissionGroupMap, arg.PermissionID, arg.PermissionGroupID)
	return err
}

const addUser = `-- name: AddUser :exec
INSERT INTO users (username, email, password, created_at, updated_at) VALUES ($1, $2, $3, $4, $5)
`

type AddUserParams struct {
	Username  string           `json:"username"`
	Email     pgtype.Text      `json:"email"`
	Password  string           `json:"password"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) error {
	_, err := q.db.Exec(ctx, addUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const addUserGroup = `-- name: AddUserGroup :exec
INSERT INTO user_groups (group_name, created_at, updated_at) VALUES ($1, $2, $3)
`

type AddUserGroupParams struct {
	GroupName string           `json:"group_name"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) AddUserGroup(ctx context.Context, arg AddUserGroupParams) error {
	_, err := q.db.Exec(ctx, addUserGroup, arg.GroupName, arg.CreatedAt, arg.UpdatedAt)
	return err
}

const addUserGroupMap = `-- name: AddUserGroupMap :exec
INSERT INTO user_group_map (user_id, user_group_id) VALUES ($1, $2)
`

type AddUserGroupMapParams struct {
	UserID      int32 `json:"user_id"`
	UserGroupID int32 `json:"user_group_id"`
}

func (q *Queries) AddUserGroupMap(ctx context.Context, arg AddUserGroupMapParams) error {
	_, err := q.db.Exec(ctx, addUserGroupMap, arg.UserID, arg.UserGroupID)
	return err
}

const deletePermission = `-- name: DeletePermission :exec
DELETE FROM permissions WHERE id = $1
`

func (q *Queries) DeletePermission(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePermission, id)
	return err
}

const deletePermissionGroup = `-- name: DeletePermissionGroup :exec
DELETE FROM permission_groups WHERE id = $1
`

func (q *Queries) DeletePermissionGroup(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePermissionGroup, id)
	return err
}

const deletePermissionGroupMap = `-- name: DeletePermissionGroupMap :exec
DELETE FROM permission_group_map WHERE permission_group_id = $1
`

func (q *Queries) DeletePermissionGroupMap(ctx context.Context, permissionGroupID int32) error {
	_, err := q.db.Exec(ctx, deletePermissionGroupMap, permissionGroupID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const deleteUserGroup = `-- name: DeleteUserGroup :exec
DELETE FROM user_groups WHERE id = $1
`

func (q *Queries) DeleteUserGroup(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUserGroup, id)
	return err
}

const deleteUserGroupMap = `-- name: DeleteUserGroupMap :exec
DELETE FROM user_group_map WHERE user_group_id = $1
`

func (q *Queries) DeleteUserGroupMap(ctx context.Context, userGroupID int32) error {
	_, err := q.db.Exec(ctx, deleteUserGroupMap, userGroupID)
	return err
}

const deleteUserGroupMapByUserID = `-- name: DeleteUserGroupMapByUserID :exec
DELETE FROM user_group_map WHERE user_id = $1
`

func (q *Queries) DeleteUserGroupMapByUserID(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUserGroupMapByUserID, userID)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, first_name, last_name, password, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, email, first_name, last_name, password, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByOAuthClientID = `-- name: GetUserByOAuthClientID :one
SELECT id, username, email, first_name, last_name, password, created_at, updated_at FROM users WHERE id = (SELECT user_id FROM oauth_clients WHERE client_id = $1)
`

func (q *Queries) GetUserByOAuthClientID(ctx context.Context, clientID string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByOAuthClientID, clientID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, first_name, last_name, password, created_at, updated_at FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserGroupsByUserID = `-- name: GetUserGroupsByUserID :many
SELECT id, group_name, created_at, updated_at FROM user_groups WHERE id IN (SELECT user_group_id FROM user_group_map WHERE user_id = $1)
`

func (q *Queries) GetUserGroupsByUserID(ctx context.Context, userID int32) ([]UserGroup, error) {
	rows, err := q.db.Query(ctx, getUserGroupsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserGroup
	for rows.Next() {
		var i UserGroup
		if err := rows.Scan(
			&i.ID,
			&i.GroupName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePermissionGroupMap = `-- name: RemovePermissionGroupMap :exec
DELETE FROM permission_group_map WHERE permission_id = $1 AND permission_group_id = $2
`

type RemovePermissionGroupMapParams struct {
	PermissionID      int32 `json:"permission_id"`
	PermissionGroupID int32 `json:"permission_group_id"`
}

func (q *Queries) RemovePermissionGroupMap(ctx context.Context, arg RemovePermissionGroupMapParams) error {
	_, err := q.db.Exec(ctx, removePermissionGroupMap, arg.PermissionID, arg.PermissionGroupID)
	return err
}

const removeUserGroupMap = `-- name: RemoveUserGroupMap :exec
DELETE FROM user_group_map WHERE user_id = $1 AND user_group_id = $2
`

type RemoveUserGroupMapParams struct {
	UserID      int32 `json:"user_id"`
	UserGroupID int32 `json:"user_group_id"`
}

func (q *Queries) RemoveUserGroupMap(ctx context.Context, arg RemoveUserGroupMapParams) error {
	_, err := q.db.Exec(ctx, removeUserGroupMap, arg.UserID, arg.UserGroupID)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users SET password = $1, updated_at = $2 WHERE id = $3
`

type UpdatePasswordParams struct {
	Password  string           `json:"password"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	ID        int32            `json:"id"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.Password, arg.UpdatedAt, arg.ID)
	return err
}

const updatePermission = `-- name: UpdatePermission :exec
UPDATE permissions SET name = $1, updated_at = $2 WHERE id = $3
`

type UpdatePermissionParams struct {
	Name      string           `json:"name"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	ID        int32            `json:"id"`
}

func (q *Queries) UpdatePermission(ctx context.Context, arg UpdatePermissionParams) error {
	_, err := q.db.Exec(ctx, updatePermission, arg.Name, arg.UpdatedAt, arg.ID)
	return err
}

const updatePermissionGroup = `-- name: UpdatePermissionGroup :exec
UPDATE permission_groups SET group_name = $1, updated_at = $2 WHERE id = $3
`

type UpdatePermissionGroupParams struct {
	GroupName string           `json:"group_name"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	ID        int32            `json:"id"`
}

func (q *Queries) UpdatePermissionGroup(ctx context.Context, arg UpdatePermissionGroupParams) error {
	_, err := q.db.Exec(ctx, updatePermissionGroup, arg.GroupName, arg.UpdatedAt, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET username = $1, email = $2, updated_at = $3 WHERE id = $4
`

type UpdateUserParams struct {
	Username  string           `json:"username"`
	Email     pgtype.Text      `json:"email"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	ID        int32            `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const verifyUser = `-- name: VerifyUser :exec
SELECT id, username, email, first_name, last_name, password, created_at, updated_at FROM users WHERE username = $1 OR email = $1 AND password = $2
`

type VerifyUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) VerifyUser(ctx context.Context, arg VerifyUserParams) error {
	_, err := q.db.Exec(ctx, verifyUser, arg.Username, arg.Password)
	return err
}

const verifyUserByEmail = `-- name: VerifyUserByEmail :exec
SELECT id, username, email, first_name, last_name, password, created_at, updated_at FROM users WHERE email = $1 AND password = $2
`

type VerifyUserByEmailParams struct {
	Email    pgtype.Text `json:"email"`
	Password string      `json:"password"`
}

func (q *Queries) VerifyUserByEmail(ctx context.Context, arg VerifyUserByEmailParams) error {
	_, err := q.db.Exec(ctx, verifyUserByEmail, arg.Email, arg.Password)
	return err
}
