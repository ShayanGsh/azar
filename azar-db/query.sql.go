// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUser = `-- name: AddUser :exec
INSERT INTO users (username, email, password) VALUES ($1, $2, $3)
`

type AddUserParams struct {
	Username string      `json:"username"`
	Email    pgtype.Text `json:"email"`
	Password string      `json:"password"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) error {
	_, err := q.db.Exec(ctx, addUser, arg.Username, arg.Email, arg.Password)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const deleteUserGroup = `-- name: DeleteUserGroup :exec
DELETE FROM user_groups WHERE id = $1
`

func (q *Queries) DeleteUserGroup(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUserGroup, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, first_name, last_name, group_id, password, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.GroupID,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, email, first_name, last_name, group_id, password, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.GroupID,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, first_name, last_name, group_id, password, created_at, updated_at FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.GroupID,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users SET password = $1 WHERE id = $2
`

type UpdatePasswordParams struct {
	Password string `json:"password"`
	ID       int32  `json:"id"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.Password, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET username = $1, email = $2, updated_at = $3 WHERE id = $4
`

type UpdateUserParams struct {
	Username  string           `json:"username"`
	Email     pgtype.Text      `json:"email"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	ID        int32            `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const verifyUser = `-- name: VerifyUser :exec
SELECT id, username, email, first_name, last_name, group_id, password, created_at, updated_at FROM users WHERE username = $1 OR email = $1 AND password = $2
`

type VerifyUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) VerifyUser(ctx context.Context, arg VerifyUserParams) error {
	_, err := q.db.Exec(ctx, verifyUser, arg.Username, arg.Password)
	return err
}

const verifyUserByEmail = `-- name: VerifyUserByEmail :exec
SELECT id, username, email, first_name, last_name, group_id, password, created_at, updated_at FROM users WHERE email = $1 AND password = $2
`

type VerifyUserByEmailParams struct {
	Email    pgtype.Text `json:"email"`
	Password string      `json:"password"`
}

func (q *Queries) VerifyUserByEmail(ctx context.Context, arg VerifyUserByEmailParams) error {
	_, err := q.db.Exec(ctx, verifyUserByEmail, arg.Email, arg.Password)
	return err
}
